version: '2.1'

services:

  configs-db:
    image: postgres:9.6
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: configs
      POSTGRES_PASSWORD: cortex
    volumes:
      [ "./data/postgresql:/var/lib/postgresql" ]

  consul:
    image: consul:latest
    ports:
      - "8500:8500"
    command: "agent -dev -ui -client 0.0.0.0"

  #registrator:
    #image: gliderlabs/registrator:latest
    #command: "consul://consul:8500"
    #container_name: registrator
    #depends_on:
    #  - consul
    #links:
    #  - consul
    #volumes:
    #  [ "/var/run/docker.sock:/tmp/docker.sock" ]

  memcached:
    image: memcached:1.5.12-alpine
    ports:
      - "11211:11211"
    depends_on:
      - consul
    labels:
      SERVICE_NAME: memcached
    command: "memcached -m 64 -p 11211"

  cassandra:
    image: cassandra:3.11
    environment:
      MAX_HEAP_SIZE: 1G
      HEAP_NEWSIZE: 256M
    volumes:
      [ "./data/cassandra:/var/lib/cassandra" ]
    ports:
     - "9042:9042"
    healthcheck:
      test: ["CMD", "cqlsh", "-u cassandra", "-p cassandra" ,"-e describe keyspaces"]
      interval: 15s
      timeout: 10s
      retries: 60

  cassandra-load-keyspace:
      image: cassandra:3.11
      depends_on:
        cassandra:
          condition: service_healthy
      volumes:
        [ "./config/cassandra_schema.cql:/schema.cql" ]
      command: /bin/bash -c "echo loading cassandra keyspace && cqlsh cassandra -f /schema.cql"

  configs:
    image: quay.io/cortexproject/configs:latest
    ports:
      - "81:80"
    volumes:
      [ "./data/dbpwd.txt:/etc/dbpwd.txt" ]
    depends_on:
      - configs-db
      - consul
    command: [ "-log.level=debug",
               "-server.http-listen-port=80",
               "-database.uri=postgres://postgres@configs-db/configs?sslmode=disable",
               "-database.migrations=/migrations",
               "-database.password-file=/etc/dbpwd.txt" ]

  frontend:
    image: nginx:latest
    volumes:
      [ "./config/nginx:/etc/nginx",
        "./config/nginx/ssl:/etc/nginx/ssl" ]
    ports:
     - "443:443"
     - "8080:80"
    depends_on:
      - distributor
      - query-frontend

  alertmanager:
    image: quay.io/cortexproject/alertmanager:latest
    ports:
      - "82:80"
    depends_on:
      - configs
    command: [ "-log.level=debug",
               "-server.http-listen-port=80",
               "-alertmanager.configs.url=http://configs:80",
               "-alertmanager.web.external-url=/api/prom/alertmanager" ]

  distributor:
    image: quay.io/cortexproject/distributor:latest
    ports:
      - "83:80"
    depends_on:
      - consul
    command: [ "-log.level=debug",
               "-server.http-listen-port=80",
               "-consul.hostname=consul:8500",
               "-distributor.shard-by-all-labels=true",
               "-distributor.replication-factor=1" ]

  ingester:
    image: quay.io/cortexproject/ingester:latest
    ports:
      - "84:80"
    depends_on:
        consul:
          condition: service_started
        memcached:
          condition: service_started
        cassandra:
          condition: service_healthy
    command: [ "-log.level=debug",
               "-server.http-listen-port=80",
               "-server.grpc-listen-port=9094",
               "-ingester.port=9094",
               "-ingester.join-after=5s",
               "-ingester.claim-on-rollout=false",
               "-ingester.normalise-tokens=true",
               "-chunk.storage-client=cassandra",
               "-consul.hostname=consul:8500",
               "-cassandra.addresses=cassandra",
               "-cassandra.keyspace=cortex_test",
               "-cassandra.timeout=30000ms",
               "-memcached.hostname=memcached",
               "-memcached.timeout=100ms" ]

  querier:
    image: quay.io/cortexproject/querier:latest
    ports:
      - "86:80"
    depends_on:
        consul:
          condition: service_started
        memcached:
          condition: service_started
        cassandra:
          condition: service_healthy
    command: [ "-log.level=debug",
              "-server.http-listen-port=80",
              "-querier.frontend-address=query-frontend:9095",
              "-consul.hostname=consul:8500",
              "-chunk.storage-client=cassandra",
              "-cassandra.addresses=cassandra",
              "-cassandra.keyspace=cortex_test",
              "-cassandra.timeout=30000ms",
              "-distributor.replication-factor=1",
              "-distributor.extra-query-delay=100ms",
              "-memcached.hostname=memcached",
              "-memcached.timeout=100ms" ]

  ruler:
    image: quay.io/cortexproject/ruler:latest
    ports:
      - "87:80"
    depends_on:
        consul:
          condition: service_started
        memcached:
          condition: service_started
        cassandra:
          condition: service_healthy
    command: [ "-log.level=debug",
              "-server.http-listen-port=80",
              "-consul.hostname=consul:8500",
              "-ruler.configs.url=http://configs:80",
              "-ruler.alertmanager-url=http://alertmanager:80/api/prom/alertmanager/",
              "-chunk.storage-client=cassandra",
              "-cassandra.addresses=cassandra",
              "-cassandra.keyspace=cortex_test",
              "-cassandra.timeout=30000ms",
              "-distributor.replication-factor=1",
              "-distributor.extra-query-delay=100ms",
              "-memcached.hostname=memcached",
              "-memcached.timeout=100ms" ]

  table-manager:
    image: quay.io/cortexproject/table-manager:latest
    ports:
      - "8888:80"
    depends_on:
        cassandra:
          condition: service_healthy
    command: [ "-server.http-listen-port=80",
               "-chunk.storage-client=cassandra",
               "-cassandra.addresses=cassandra",
               "-cassandra.keyspace=cortex_test",
               "-cassandra.timeout=30000ms"]

  query-frontend:
    image: quay.io/cortexproject/query-frontend:latest
    ports:
      - "8081:80"
      - "9095:9095"
    depends_on:
      - consul
    command: [ "-log.level=debug",
              "-querier.align-querier-with-step=true",
              "-querier.split-queries-by-day=true",
              "-querier.cache-results=true",
              "-memcached.hostname=memcached",
              "-memcached.timeout=100ms",
              "-server.http-listen-port=80",
              "-server.grpc-listen-port=9095" ]

  prometheus:
    image: prom/prometheus:latest
    volumes:
        [ "./config/prometheus/prometheus.yml:/prometheus.yml:ro" ]
    ports:
      - "9090:9090"
    depends_on:
        - consul
        - frontend
        - distributor
    command: [ "--config.file=/prometheus.yml",
               "--log.level=debug" ]

  grafana:
    image: grafana/grafana:latest
    ports:
    - 3000:3000
    volumes:
      [ "./config/grafana.json:/usr/share/grafana/public/dashboards/home.json:ro" ]
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin

  grafana_bootstrap:
    image: grafana/grafana:latest
    entrypoint: /bin/sh
    depends_on:
    - grafana
    volumes:
     [ "./config/grafana-bootstrap.sh:/grafana-bootstrap.sh:ro" ]
    command: >
      -c '/grafana-bootstrap.sh'
